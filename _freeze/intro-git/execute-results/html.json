{
  "hash": "5065358e32facc0743962a390cc68f3d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfrom: markdown+emoji\nformat:\n  revealjs:\n    logo: img/cesab-logo.png\n    footer: \"{{< fa brands github >}} &nbsp;[`Reproducible Research`](https://rdatatoolbox.github.io/) &nbsp; &bull; &nbsp; {{< fa brands creative-commons >}} {{< fa brands creative-commons-by >}} &nbsp;[`cc-by-4.0`](https://creativecommons.org/licenses/by/4.0/deed.en)\"\n    smaller: true\n    auto-stretch: false\n    toc-depth: 1\n    theme: [default, \"css/custom.scss\"]\nengine: knitr\n---\n\n\n::: {.title-slide-container}\n\n::: {.title-slide-content}\n\n:::: {.columns}\n\n::: {.column .logo width=\"30%\"}\n<!-- ![](https://raw.githubusercontent.com/rdatatoolbox/.github/main/profile/logo-rdatatoolbox_150dpi.png) -->\n![](img/git-logo.png)\n:::\n\n::: {.column width=\"70%\"}\n\n::: {.title}\nVersion control\n:::\n\n::: {.subtitle}\nIntroduction to git & GitHub\n:::\n\n::: {.date}\nJune 2025\n:::\n\n:::: {.columns}\n\n::: {.column .author width=\"45%\"}\nNicolas Casajus<br/>\n[{{< fa paper-plane >}}](mailto:nicolas.casajus@fondationbiodiversite.fr)\n[{{< fa brands github >}}](https://github.com/ahasverus)\n[{{< fa globe >}}](https://nicolascasajus.fr)\n\n::: {.affiliation}\n{{< fa house >}} &nbsp;[FRB-CESAB](https://www.fondationbiodiversite.fr/en/about-the-foundation/le-cesab/)\n:::\n:::\n\n::: {.column .author width=\"45%\"}\nRomain Frelat<br/>\n[{{< fa paper-plane >}}](mailto:romain.frelat@fondationbiodiversite.fr)\n[{{< fa brands github >}}](https://github.com/rfrelat)\n:::\n\n\n::::\n:::\n::::\n:::\n:::\n\n\n# Introduction\n\n## What is reproducibility?\n\n. . .\n\n<br>\n\n![Source: [https://eliocamp.github.io](https://eliocamp.github.io/reproducibility-with-r/materials/day1/01-introduction/)](img/reproducible-matrix.jpg){fig-align=\"center\" width=\"50%\"}\n\n\n**Reproducibility** is about results that can be obtained by someone else (or you in the future) given the **same data** and the **same code**. This is a technical problem.\n\n<br/>\n\n{{< fa hand-point-right >}} &nbsp;We talk about **Computational reproducibility**\n\n\n## Reproducibility spectrum\n\n<br>\n\n![Source: Peng (2011)[^peng]](img/peng-science.jpg){fig-align=\"center\" width=\"75%\"}\n\n. . .\n\n<br/>\n\nEach degree of reproducibility requires additional skills and time. While some of those skills (e.g. literal programming, version control, setting up environments) pay off in the long run, they can require a high up-front investment.\n\n## Concepts\n\nAccording to Wilson _et al._ (2017)[^wilson], good practices for a better reproducibility can be organized into the following six topics:\n\n<br/>\n<br/>\n<br/>\n\n:::: { .columns }\n::: { .column .center width=\"33%\"}\n{{< fa database >}} &nbsp;Data management\n:::\n::: { .column .center width=\"33%\"}\n{{< fa folder >}} &nbsp;Project organization\n:::\n::: { .column .center width=\"33%\"}\n{{< fa code-branch >}} &nbsp;Tracking changes\n:::\n::::\n\n<br/>\n\n:::: { .columns }\n::: { .column .center width=\"33%\"}\n{{< fa brands github >}} &nbsp;Collaboration\n:::\n::: { .column .center width=\"33%\"}\n{{< fa brands markdown >}} &nbsp;Manuscript\n:::\n::: { .column .center width=\"33%\"}\n{{< fa brands r-project >}} &nbsp;Code & Software\n:::\n::::\n\n\n[^wilson]: <https://doi.org/10.1371/journal.pcbi.1005510>\n\n\n# Version control\n\n## Motivations\n\n::::{ .columns }\n:::{ .column width=\"50%\" align=\"left\"}\n![Project content (without `git`)](img/folder_without_git.png)\n:::\n:::{ .column width=\"50%\" .fragment}\n**Questions**\n\n- Which version of `analyses.R` is the final one?\n- What about `data.csv`?\n- What are the differences between versions?\n- Who have contributed to these versions? When?\n:::\n::::\n\n\n. . .\n\n{{< fa hand-point-right >}} &nbsp;We need a tool that deals with versions for us\n\n\n## Motivations\n\n![](img/git-logo-long.png){width=15% fig-align=\"center\"}\n\n::::{ .columns }\n:::{ .column width=\"50%\" align=\"left\"}\n![Project content (without `git`)](img/folder_without_git.png)\n:::\n:::{ .column width=\"50%\" align=\"left\"}\n![Project content (with `git`)](img/folder_with_git.png)\n:::\n::::\n\n\n## Presentation of `git`\n\n`git` is a **Version Control System** (VCS).\n\n\n## Presentation of `git`\n\n`git` is a **Version Control System** (VCS). With `git` you can:\n\n::::{ .columns }\n:::{ .column width=\"60%\" align=\"left\"}\n- keep your working copy clean\n- make contributions transparent\n<br/>(what | who | when | why)\n- keep the entire history of a file (and project)\n- inspect a file throughout its life time\n- revert back to a previous version\n- handle multiple versions (branches)\n- facilitate collaborations w/ code hosting platforms\n<br>(GitHub, GitLab, Bitbucket, etc.)\n- backup your project\n:::\n:::{ .column width=\"40%\"}\n<br/>\n<br/>\n![](img/git-logo-long.png)\n:::\n::::\n\n\n## A word of warning\n\n\n**`git`** and **`GitHub`** are **not the same thing**\n\n- `git` is a free and open-source **software**\n- `GitHub` (and co) is a **web platform** to host and share projects tracked by `git`\n\n\n. . . \n\n<br>\n\nIn other words:\n\n> You do not need `GitHub` to use `git` but you cannot use `GitHub` without using `git`\n\n\n## git as a CLI\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n![](img/git-cli.png){width=100%}\n:::\n:::{ .column width=\"50%\" align=\"left\"}\n<br>\n\n- `Git` is a command-line interface (CLI)\n- You interact with `git` using a terminal\n- All commands start w/ the keyword `git`\n<br>(`git status / log / add / commit`)\n:::\n::::\n\n\n. . .\n\n{{< fa lightbulb >}} &nbsp;But a lot of [third-party tools](https://git-scm.com/downloads/guis) provides a graphical interface to `git`\n<br>(e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [GitKraken](https://www.gitkraken.com/), [GitHub Desktop](https://desktop.github.com/), extensions for [VSCode](https://code.visualstudio.com/), [VSCodium](https://vscodium.com/), [neovim](https://neovim.io/), etc.)\n\n\n<br>\n\n> Just keep in mind that for some operations you will need to use the terminal\n\n\n## RStudio and git\n\n::::{ .columns }\n:::{ .column width=\"100%\"}\n**Git main panel**\n\n![](img/git-rstudio.png){width=80%}\n:::\n:::{ .column width=\"0%\"}\n:::\n::::\n\n\n## RStudio and git\n\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n**Stage files, view differences and commit changes**\n\n![](img/rstudio-change.png){width=100%}\n:::\n:::{ .column width=\"50%\"}\n**View history and versions**\n\n![](img/rstudio-history.png){width=100%}\n:::\n::::\n\n## Installation and configuration\n\n\nCheck out and follow the tutorial from N. Casajus, 2024, Setting up R: [https://frbcesab.github.io/rsetup/](https://frbcesab.github.io/rsetup/).  \n\n\n![](img/rsetup.png){fig-align=\"center\" width=50%}\n\n\n\n\n\n\n\n# Using `git` for tracking changes\n\n## How does `git` work?\n\n- `git` takes a sequence of **snapshots**\n- Each snapshot can contain changes for one or many file(s)\n- User chooses which files to _'save'_ in a snapshot and when\n<br>(`!=` file hosting services like Dropbox, Google Drive, etc.)\n\n\n. . .\n\n<br>\n\n{{< fa hand-point-right >}} &nbsp;In the `git` universe, a snapshot is a **version**, i.e. the state of the whole project at a specific point in time\n\n\n. . .\n\n<br>\n\nA snapshot is a two-step process:\n\n- **Stage files**: select which files to add to the version\n- **Commit changes**: save the version and add metadata (`commit message`)\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;Initialize `git` in a (empty) folder (`repository`)\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-0.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit init\n```\n<br>\n\nThe **three areas** of a `git` `repository`:\n\n- **`working copy`**: current state of the directory (what you actually see)\n- **`staging area`**: selected files that will be added to the next version\n- **`repository`**: area w/ all the versions<br/>(the `.git/` subdirectory)\n:::\n::::\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;Add new files in the `repository`\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-1.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit status\n\n# On branch main\n# \n# No commits yet\n# \n# Untracked files:\n# \tREADME.md\n# \tanalyses.R\n# \tdata.csv\n# \n# Nothing added to commit but untracked files present\n# Use \"git add <file>...\" to track\n```\n:::\n::::\n\n\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;`Stage` (select) one file\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-2.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit add data.csv\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# \n# No commits yet\n# \n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n# \tnew file:   data.csv\n# \n# Untracked files:\n#   (use \"git add <file>...\" to track)\n# \tREADME.md\n# \tanalyses.R\n```\n:::\n::::\n\n\n\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;`Stage` (select) several files\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-3.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit add data.csv analyses.R\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# \n# No commits yet\n# \n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n# \tnew file:   analyses.R\n# \tnew file:   data.csv\n# \n# Untracked files:\n#   (use \"git add <file>...\" to track)\n# \tREADME.md\n```\n:::\n::::\n\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;`Stage` (select) all files\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-4.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit add .\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# \n# No commits yet\n# \n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n# \tnew file:   analyses.R\n# \tnew file:   data.csv\n# \tnew file:   README.md\n```\n:::\n::::\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;`Commit` changes to create a new version\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-5.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit commit -m \"a good commit message\"\n```\n:::\n::::\n\n\n\n\n## Basic workflow\n\n{{< fa hand-point-right >}} &nbsp;Now we are `up-to-date`\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-6.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit status\n\n# On branch main\n# nothing to commit, working tree clean\n```\n:::\n::::\n\n\n\n## Commits\n\n::::{.columns}\n:::{.column width=50%}\nWhen committing a new version (w/ `git commit`), the following information must be added:\n\n- **`WHO`** - the person who has made the changes\n<br>(automatically added by `git`)\n- **`WHEN`** - the date of the commit\n<br>(automatically added by `git`)\n- **`WHAT`** - the files that have been modified\n<br>(selected by the user w/ `git add`)\n- **`WHY`** - the reason of the commit, i.e. what has been done compared to the previous version\n<br>(added by the user w/ `git commit`)\n\n:::\n\n:::{.column width=50% .fragment}\nA commit message has a title line, and an optional body\n\n```bash\n# Commit message w/ title\ngit commit -m \"title\"\n```\n\n\n<br>\n\n**What is a good commit message?**\n\nA good commit title:\n\n- should be **short** (less than 50 characters)\n- should be **informative** and **unambiguous**\n- should use **active voice** and **present tense**\n:::\n::::\n\n. . .\n\n::::{.columns}\n:::{.column width=50%}\n:::\n:::{.column width=50%}\n```bash\n# Print git history\ngit log --oneline\n\n# f960dd3 (HEAD -> main) add data cleaning script\n# dd4472c update data.csv\n# 2bb9bb4 add README.md\n# 2d79e7e first commit\n```\n:::\n::::\n\n\n## When should you commit?\n\n::::{.columns}\n:::{.column width=50%}\n![](img/in-case-of-fire.png){width=90%}\n:::\n:::{.column width=50% .fragment}\n<br>\n\n- Commit a new version when you reach a **milestone**\n- Create **small** and atomic commits\n- Commit a state that is actually **working**\n:::\n::::\n\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**1. Undo recent, uncommitted and unstaged changes**\n\nYou have modified a file but have not staged changes and you want to restore the previous version\n\n. . .\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-7.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to stage changes)\n#   (use \"git restore <file>...\" to discard changes)\n# \tmodified:   data.csv\n#\n# No changes added to commit\n```\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**1. Undo recent, uncommitted and unstaged changes**\n\nYou have modified a file but have not staged changes and you want to restore the previous version\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-8.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\n# Restore one file (discard unstaged changes)\ngit restore data.csv\n```\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Nothing to commit, working tree clean\n```\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**1. Undo recent, uncommitted and unstaged changes**\n\nYou have modified a file but have not staged changes and you want to restore the previous version\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-8.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\n# Restore one file (discard unstaged changes)\ngit restore data.csv\n```\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Nothing to commit, working tree clean\n```\n<br>\n\n{{< fa lightbulb >}} &nbsp;To discard all changes:\n```bash\n# Cancel all non-staged changes\ngit restore .\n```\n:::\n::::\n\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**2. Unstaged uncommitted files**\n\nYou have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version\n\n. . .\n\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-9.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Changes to be committed:\n#   (use \"git restore --staged <file>...\" to unstage)\n# \tmodified:   data.csv\n```\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**2. Unstaged uncommitted files**\n\nYou have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-10.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\n# Unstage one file\ngit restore --staged data.csv\n```\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to stage changes)\n#   (use \"git restore <file>...\" to discard changes)\n# \tmodified:   data.csv\n#\n# No changes added to commit\n```\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**2. Unstaged uncommitted files**\n\nYou have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-8.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\n# Unstage one file\ngit restore --staged data.csv\n```\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to stage changes)\n#   (use \"git restore <file>...\" to discard changes)\n# \tmodified:   data.csv\n#\n# No changes added to commit\n```\n<br>\n\nYou can now restore the previous version w/:\n```bash\n# Discard changes (restore previous version)\ngit restore data.csv\n```\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**3. Revert one commit**\n\nYou want to reverse the effects of a commit: use `git revert`\n\n. . .\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# f960dd3 (HEAD -> main) commit 4\n# dd4472c commit 3\n# 2bb9bb4 commit 2\n# 2d79e7e commit 1\n```\n:::\n:::{ .column width=\"50%\"}\n:::\n::::\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**3. Revert one commit**\n\nYou want to reverse the effects of a commit: use `git revert`\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# f960dd3 (HEAD -> main) commit 4\n# dd4472c commit 3\n# 2bb9bb4 commit 2\n# 2d79e7e commit 1\n```\n\n<br>\n\n```bash\n# Revert commit dd4472c\ngit revert dd4472c\n```\n:::\n:::{ .column width=\"50%\"}\n:::\n::::\n\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**3. Revert one commit**\n\nYou want to reverse the effects of a commit: use `git revert`\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# f960dd3 (HEAD -> main) commit 4\n# dd4472c commit 3\n# 2bb9bb4 commit 2\n# 2d79e7e commit 1\n```\n\n<br>\n\n```bash\n# Revert commit dd4472c\ngit revert dd4472c\n```\n\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# d62ad3e (HEAD -> main) Revert \"commit 3\"\n# f960dd3 commit 4\n# dd4472c commit 3\n# 2bb9bb4 commit 2\n# 2d79e7e commit 1\n```\n:::\n:::{ .column width=\"50%\"}\n:::\n::::\n\n`git revert` does not alter the history and creates a new commit\n\n\n\n## Undoing things\n\n{{< fa hand-point-right >}} &nbsp;\n**4. Deleting commits**\n\nYou want to delete one or more commits: use `git reset --hard`\n\n\n::::{ .columns }\n:::{ .column width=\"50%\" .fragment}\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# f960dd3 (HEAD -> main) commit 4\n# dd4472c commit 3\n# 2bb9bb4 commit 2\n# 2d79e7e commit 1\n```\n\n<br>\n\n```bash\n# Delete the two more recent commits\ngit reset --hard 2bb9bb4\n```\n\n:::\n:::{ .column width=\"50%\"}\n:::\n::::\n\n::::{ .columns }\n:::{ .column width=\"50%\" .fragment}\n<br>\n\n```bash\n# Print git history\ngit log --oneline\n\n# 2bb9bb4 (HEAD -> main) commit 2\n# 2d79e7e commit 1\n```\n\n:::\n:::{ .column width=\"50%\"}\n:::\n::::\n\n\n. . . \n\n`git reset --hard` alters the history. **Be careful** with this command\n\n\n\n# {{< fa brands github >}} &nbsp;Using GitHub for collaboration\n\n## Code hosting platforms\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\nGitHub and co are **cloud-based git repository hosting services**\n\n{{< fa hand-point-right >}} &nbsp;\nPerfect solutions to collaborate on projects tracked by `git`\n\n\n<br>\n\n**Services**\n\n- Full integration of version control (commits, history, differences)\n- Easy collaboration w/ branches, forks, pull requests\n- Issues tracking system\n- Enhanced documentation rendering (README, Wiki)\n\n\n:::\n:::{ .column width=\"20%\" .center}\n![](img/github-logo.png){width=\"25%\"}\n<br>\n\n[**GitHub**](https://github.com/)\n<br>\n\n![](img/bitbucket-logo.png){width=\"25%\"}\n<br>\n\n[**BitBucket**](https://bitbucket.org/)\n:::\n:::{ .column width=\"20%\" .center}\n![](img/gitlab-logo.png){width=\"25%\"}\n<br>\n\n[**GitLab**](https://gitlab.com/)\n<br>\n\n![](img/sourceforge-logo.png){width=\"25%\"}\n<br>\n\n[**SourceForge**](https://sourceforge.net/)\n\n:::\n::::\n\n\n## Presentation of GitHub\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\n**Overview**\n\n- Created in 2008\n- For-profit company (property of Microsoft since 2018)\n- Used by more than 100 million developers around the world\n\n<br>\n\n**Advantages**\n\n- User-friendly interface for `git`\n- Free account w/ unlimited public/private repositories\n- Organization account (w/ free plan)\n- Advanced tools for collaboration\n- Static website hosting  \n\n:::\n:::{ .column width=\"50%\" .center}\n![](img/github-logo.png){width=\"50%\"}\n:::\n::::\n\n\n## GitHub - Account homepage\n\n::: {.center}\n![_Source:_ <https://github.com/ahasverus>](img/github-homepage.png){width=\"75%\"}\n:::\n\n\n## GitHub - Organization homepage\n\n::: {.center}\n![_Source:_ <https://github.com/FELLOW-flora>](img/github-fellow.png){width=\"60%\"}\n:::\n\n\n\n## GitHub - Repository homepage\n\n\n::: {.center}\n![_Source:_ <https://github.com/FELLOW-flora/fellow-traits>](img/github-traits.png){width=\"60%\"}\n:::\n\n\n## Create a repository\n\n::: {.center}\n![](img/github-newrepo-1.png){width=\"75%\"}\n:::\n\n\n## Create a repository\n\n::: {.center}\n![](img/github-newrepo-2.png){width=\"75%\"}\n:::\n\n\n\n## Create a repository\n\n::: {.center}\n![](img/github-newrepo-3.png){width=\"75%\"}\n:::\n\n\n## Get the URL to clone\n\n::: {.center}\n![](img/github-newrepo-4.png){width=\"75%\"}\n:::\n\n\n## Clone a repository w/ RStudio\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"33%\" .center}\n![Select `Version Control`](img/rstudio-project.png){width=\"100%\"}\n:::\n::: {.column width=\"33%\" .center .fragment}\n![Select `Git`](img/rstudio-clone-1.png){width=\"100%\"}\n:::\n::: {.column width=\"33%\" .center .fragment}\n![Copy the URL and fill all the fields](img/rstudio-clone-2.png){width=\"100%\"}\n:::\n::::\n\n\n## Local copy of a repository\n\n::: {.center}\n![](img/rstudio-clone-3.png){width=\"80%\"}\n:::\n\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;Add a new file: `README.md`\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-11.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'\n#\n# Untracked files:\n#   README.md\n# \n# Nothing added to commit but untracked files present\n# Use \"git add <file>...\" to track\n```\n\n:::\n::::\n\n\n\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;`Stage` changes\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-12.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit add .\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'\n#\n# Changes to be committed:\n#   (use \"git restore --staged <file>...\" to unstage)\n#   new file:   README.md\n```\n\n:::\n::::\n\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;`Commit` changes\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-13.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit commit -m \"add README\"\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is ahead of 'origin/main' by 1 commit.\n#   (use \"git push\" to publish your local commits)\n# \n# nothing to commit, working tree clean\n```\n\n:::\n::::\n\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;`Push` changes to remote\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-14.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n<br>\n\n```bash\ngit push\n\n# Sometimes, you'll need to use:\ngit push -u origin main\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'.\n# \n# nothing to commit, working tree clean\n```\n\n:::\n::::\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;`Pull` changes from remote\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-15.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n:::\n::::\n\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp;`Pull` changes from remote\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-16.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n\n<br>\n\n```bash\ngit pull\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'.\n# \n# nothing to commit, working tree clean\n```\n\n:::\n::::\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp; Make local changes\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-17.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n\n<br>\n\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'.\n# \n# Changes not staged for commit:\n#  (use \"git add <file>...\" to update what will be committed)\n#  (use \"git restore <file>...\" to discard changes in working directory)\n#    modified:   data.csv\n#    modified:   README.md\n```\n\n:::\n::::\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp; `Stage` changes\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-18.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n\n<br>\n\n```bash\ngit add .\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'\n#\n# Changes to be committed:\n#  (use \"git restore --staged <file>...\" to unstage)\n#   modified:   data.csv\n#   modified:   README.md\n```\n\n:::\n::::\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp; `Commit` changes\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-19.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n\n<br>\n\n```bash\ngit commit -m \"update dataset and README\"\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is ahead of 'origin/main' by 1 commit.\n#   (use \"git push\" to publish your local commits)\n# \n# nothing to commit, working tree clean\n```\n\n:::\n::::\n\n## Working w/ GitHub\n\n{{< fa hand-point-right >}} &nbsp; Don't forget to `Push` changes to remote\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n![](img/git-workflow-14.png){width=100%}\n:::\n:::{ .column width=\"40%\"}\n\n<br>\n\n```bash\ngit push\n```\n\n<br>\n\n```bash\ngit status\n\n# On branch main\n# Your branch is up to date with 'origin/main'.\n# \n# nothing to commit, working tree clean\n```\n\n\n:::\n::::\n\n## Help me, I can't push!\n\nWhen you try to push, you might see this following error message:\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n```bash\ngit push\n\n# To github.com:ahasverus/projectname.git\n#  ! [rejected]        main -> main (fetch first)\n#\n# error: failed to push some refs to 'github.com:ahasverus/projectname.git'\n#\n# hint: Updates were rejected because the remote contains work that you do\n# hint: not have locally. This is usually caused by another repository pushing\n# hint: to the same ref. You may want to first integrate the remote changes\n# hint: (e.g., 'git pull ...') before pushing again.\n# hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n:::\n:::{ .column width=\"40%\"}\n:::\n::::\n\n. . .\n\n<br>\n\n{{< fa lightbulb >}} &nbsp;Just `git pull` and try to `git push` again\n\n\n## Help me, I can't pull!\n\nWhen you try to pull, you might see this following error message:\n\n::::{ .columns }\n:::{ .column width=\"60%\"}\n```bash\ngit pull\n\n# [...]\n# Auto-merging README.md\n# CONFLICT (content): Merge conflict in README.md\n#\n# error: could not apply b8302e6... edit README\n#\n# hint: Resolve all conflicts manually, mark them as resolved with\n# hint: \"git add/rm <conflicted_files>\", then run \"git rebase --continue\".\n# hint: You can instead skip this commit: run \"git rebase --skip\".\n# hint: To abort and get back to the state before \"git rebase\", \n# hint: run \"git rebase --abort\".\n```\n:::\n:::{ .column width=\"40%\"}\n:::\n::::\n\n. . .\n\n<br>\n\n{{< fa hand-point-right >}} &nbsp;Welcome to the wonderful world of `git` **conflicts**  \nA `git` conflict appears when two versions cannot be merged by `git` because changes have been made to the same lines.\n\n. . .\n\n<br>\n\n{{< fa hand-point-right >}} &nbsp;You have to decide which version you want to keep.\n\n\n\n## The `.gitignore`\n\n{{< fa hand-point-right >}} &nbsp;We can also tell `git` to **ignore specific files**: it's the purpose of the `.gitignore` file\n\n<br>\n\n::::{ .columns }\n:::{ .column width=\"50%\"}\nWhich files? For instance:\n\n- passwords, tokens and other secrets\n- temporary files\n- large files\n\n:::\n\n:::{ .column width=\"50%\" .fragment}\nThe syntax is simple:\n\n```txt\n# Ignore a specific file\nREADME.html\n\n# Ignore all PDF\n*.pdf\n\n# Ignore a folder\ndata/\n\n# Ignore a subfolder\ndata/raw-data/\n\n# Ignore a specific file in a subfolder\ndata/raw-data/raw-data.csv\n```\n:::\n::::\n\n\n<br/>\n\n. . .\n\n\n{{< fa hand-point-right >}} &nbsp;Template for {{< fa brands r-project >}} projects available [here](https://github.com/github/gitignore/blob/main/R.gitignore)\n\n\n## Github as a gateway to open source projects\n\n::: {.center}\n![](img/git-advanced.png){width=\"100%\"}\n:::\n\nYou can access millions of open source projects and contribute to their development.  \n\nAnd if your Github repository is public, everyone can use and contribute to your project.    \n\n- **Fork** existing project : create an independent copy of a repository\n- **Pull request** : to contribute to the development of a repository\n- **Merge branches** : accept development from other branches\n\n\n## Github as a social platform\n\n::: {.center}\n![](img/git-advanced.png){width=\"100%\"}\n:::\n\n- **Watch**/**Star** existing repository or **Follow** colleagues/developers  \n- **Issues** : anyone can fill an issue \n  - good for keeping track of the todo list and future development\n  - issue can be attributed to someone, and categorized\n  - awesome tool to receive feedback from 'users' / colleagues\n- **Wiki** and **ReadMe** : help to organize the documentation of your code\n\n\n## Take home message\n\n<br>  <br>\n\n::: incremental\n- Git and Github are IT tools made to help you with the software development of your ecological data analysis. <br><br>\n- Key git/Github commands to remember: \n::: \n\n. . .\n\n::: {.center}\n**pull**   \nstage and **commit**  \n**push**  \n:::\n\n. . .\n\n<br> <br>\n\nMany resources online.   \nPlease contact me if you have any issue using Git/Github: [{{< fa envelope >}} romain.frelat@fondationbiodiversite.fr](mailto:romain.frelat@fondationbiodiversite.fr)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}