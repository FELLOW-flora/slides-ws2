# {{< fa brands github >}} &nbsp;Using GitHub for collaboration

## Code hosting platforms

::::{ .columns }
:::{ .column width="60%"}
GitHub and co are **cloud-based git repository hosting services**

{{< fa hand-point-right >}} &nbsp;
Perfect solutions to collaborate on projects tracked by `git`


<br>

**Services**

- Full integration of version control (commits, history, differences)
- Easy collaboration w/ branches, forks, pull requests
- Issues tracking system
- Enhanced documentation rendering (README, Wiki)


:::
:::{ .column width="20%" .center}
![](img/github-logo.png){width="25%"}
<br>

[**GitHub**](https://github.com/)
<br>

![](img/bitbucket-logo.png){width="25%"}
<br>

[**BitBucket**](https://bitbucket.org/)
:::
:::{ .column width="20%" .center}
![](img/gitlab-logo.png){width="25%"}
<br>

[**GitLab**](https://gitlab.com/)
<br>

![](img/sourceforge-logo.png){width="25%"}
<br>

[**SourceForge**](https://sourceforge.net/)

:::
::::


## Presentation of GitHub

::::{ .columns }
:::{ .column width="50%"}
**Overview**

- Created in 2008
- For-profit company (property of Microsoft since 2018)
- Used by more than 100 million developers around the world

<br>

**Advantages**

- User-friendly interface for `git`
- Free account w/ unlimited public/private repositories
- Organization account (w/ free plan)
- Advanced tools for collaboration
- Static website hosting  

:::
:::{ .column width="50%" .center}
![](img/github-logo.png){width="50%"}
:::
::::


## GitHub - Account homepage

::: {.center}
![_Source:_ <https://github.com/ahasverus>](img/github-homepage.png){width="75%"}
:::


## GitHub - Organization homepage

::: {.center}
![_Source:_ <https://github.com/FELLOW-flora>](img/github-fellow.png){width="60%"}
:::



## GitHub - Repository homepage


::: {.center}
![_Source:_ <https://github.com/FELLOW-flora/fellow-traits>](img/github-traits.png){width="60%"}
:::


## Create a repository

::: {.center}
![](img/github-newrepo-1.png){width="75%"}
:::


## Create a repository

::: {.center}
![](img/github-newrepo-2.png){width="75%"}
:::



## Create a repository

::: {.center}
![](img/github-newrepo-3.png){width="75%"}
:::


## Get the URL to clone

::: {.center}
![](img/github-newrepo-4.png){width="75%"}
:::


## Clone a repository w/ RStudio

<br>

:::: {.columns}
::: {.column width="33%" .center}
![Select `Version Control`](img/rstudio-project.png){width="100%"}
:::
::: {.column width="33%" .center .fragment}
![Select `Git`](img/rstudio-clone-1.png){width="100%"}
:::
::: {.column width="33%" .center .fragment}
![Copy the URL and fill all the fields](img/rstudio-clone-2.png){width="100%"}
:::
::::


## Local copy of a repository

::: {.center}
![](img/rstudio-clone-3.png){width="80%"}
:::


## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;Add a new file: `README.md`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-11.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'
#
# Untracked files:
#   README.md
# 
# Nothing added to commit but untracked files present
# Use "git add <file>..." to track
```

:::
::::




## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;`Stage` changes

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-12.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git add .
```

<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'
#
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
#   new file:   README.md
```

:::
::::


## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;`Commit` changes

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-13.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git commit -m "add README"
```

<br>

```bash
git status

# On branch main
# Your branch is ahead of 'origin/main' by 1 commit.
#   (use "git push" to publish your local commits)
# 
# nothing to commit, working tree clean
```

:::
::::


## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;`Push` changes to remote

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-14.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git push

# Sometimes, you'll need to use:
git push -u origin main
```

<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'.
# 
# nothing to commit, working tree clean
```

:::
::::

## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;`Pull` changes from remote

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-15.png){width=100%}
:::
:::{ .column width="40%"}
:::
::::


## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp;`Pull` changes from remote

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-16.png){width=100%}
:::
:::{ .column width="40%"}

<br>

```bash
git pull
```

<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'.
# 
# nothing to commit, working tree clean
```

:::
::::

## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp; Make local changes

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-17.png){width=100%}
:::
:::{ .column width="40%"}

<br>


```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'.
# 
# Changes not staged for commit:
#  (use "git add <file>..." to update what will be committed)
#  (use "git restore <file>..." to discard changes in working directory)
#    modified:   data.csv
#    modified:   README.md
```

:::
::::

## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp; `Stage` changes

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-18.png){width=100%}
:::
:::{ .column width="40%"}

<br>

```bash
git add .
```

<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'
#
# Changes to be committed:
#  (use "git restore --staged <file>..." to unstage)
#   modified:   data.csv
#   modified:   README.md
```

:::
::::

## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp; `Commit` changes

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-19.png){width=100%}
:::
:::{ .column width="40%"}

<br>

```bash
git commit -m "update dataset and README"
```

<br>

```bash
git status

# On branch main
# Your branch is ahead of 'origin/main' by 1 commit.
#   (use "git push" to publish your local commits)
# 
# nothing to commit, working tree clean
```

:::
::::

## Working w/ GitHub

{{< fa hand-point-right >}} &nbsp; Don't forget to `Push` changes to remote

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-14.png){width=100%}
:::
:::{ .column width="40%"}

<br>

```bash
git push
```

<br>

```bash
git status

# On branch main
# Your branch is up to date with 'origin/main'.
# 
# nothing to commit, working tree clean
```


:::
::::

## Help me, I can't push!

When you try to push, you might see this following error message:

::::{ .columns }
:::{ .column width="60%"}
```bash
git push

# To github.com:ahasverus/projectname.git
#  ! [rejected]        main -> main (fetch first)
#
# error: failed to push some refs to 'github.com:ahasverus/projectname.git'
#
# hint: Updates were rejected because the remote contains work that you do
# hint: not have locally. This is usually caused by another repository pushing
# hint: to the same ref. You may want to first integrate the remote changes
# hint: (e.g., 'git pull ...') before pushing again.
# hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```
:::
:::{ .column width="40%"}
:::
::::

. . .

<br>

{{< fa lightbulb >}} &nbsp;Just `git pull` and try to `git push` again


## Help me, I can't pull!

When you try to pull, you might see this following error message:

::::{ .columns }
:::{ .column width="60%"}
```bash
git pull

# [...]
# Auto-merging README.md
# CONFLICT (content): Merge conflict in README.md
#
# error: could not apply b8302e6... edit README
#
# hint: Resolve all conflicts manually, mark them as resolved with
# hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
# hint: You can instead skip this commit: run "git rebase --skip".
# hint: To abort and get back to the state before "git rebase", 
# hint: run "git rebase --abort".
```
:::
:::{ .column width="40%"}
:::
::::

. . .

<br>

{{< fa hand-point-right >}} &nbsp;Welcome to the wonderful world of `git` **conflicts**  
A `git` conflict appears when two versions cannot be merged by `git` because changes have been made to the same lines.

. . .

<br>

{{< fa hand-point-right >}} &nbsp;You have to decide which version you want to keep.



## The `.gitignore`

{{< fa hand-point-right >}} &nbsp;We can also tell `git` to **ignore specific files**: it's the purpose of the `.gitignore` file

<br>

::::{ .columns }
:::{ .column width="50%"}
Which files? For instance:

- passwords, tokens and other secrets
- temporary files
- large files

:::

:::{ .column width="50%" .fragment}
The syntax is simple:

```txt
# Ignore a specific file
README.html

# Ignore all PDF
*.pdf

# Ignore a folder
data/

# Ignore a subfolder
data/raw-data/

# Ignore a specific file in a subfolder
data/raw-data/raw-data.csv
```
:::
::::


<br/>

. . .


{{< fa hand-point-right >}} &nbsp;Template for {{< fa brands r-project >}} projects available [here](https://github.com/github/gitignore/blob/main/R.gitignore)


## Github as a gateway to open source projects

::: {.center}
![](img/git-advanced.png){width="100%"}
:::

You can access millions of open source projects and contribute to their development.  

And if your Github repository is public, everyone can use and contribute to your project.    

- **Fork** existing project : create an independent copy of a repository
- **Pull request** : to contribute to the development of a repository
- **Merge branches** : accept development from other branches


## Github as a social platform

::: {.center}
![](img/git-advanced.png){width="100%"}
:::

- **Watch**/**Star** existing repository or **Follow** colleagues/developers  
- **Issues** : anyone can fill an issue 
  - good for keeping track of the todo list and future development
  - issue can be attributed to someone, and categorized
  - awesome tool to receive feedback from 'users' / colleagues
- **Wiki** and **ReadMe** : help to organize the documentation of your code


## Take home message

<br>  <br>

::: incremental
- Git and Github are IT tools made to help you with the software development of your ecological data analysis. <br><br>
- Key git/Github commands to remember: 
::: 

. . .

::: {.center}
**pull**   
stage and **commit**  
**push**  
:::

. . .

<br> <br>

Many resources online.   
Please contact me if you have any issue using Git/Github: [{{< fa envelope >}} romain.frelat@fondationbiodiversite.fr](mailto:romain.frelat@fondationbiodiversite.fr)