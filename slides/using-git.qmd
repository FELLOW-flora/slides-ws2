# Using `git` for tracking changes

## How does `git` work?

- `git` takes a sequence of **snapshots**
- Each snapshot can contain changes for one or many file(s)
- User chooses which files to _'save'_ in a snapshot and when
<br>(`!=` file hosting services like Dropbox, Google Drive, etc.)


. . .

<br>

{{< fa hand-point-right >}} &nbsp;In the `git` universe, a snapshot is a **version**, i.e. the state of the whole project at a specific point in time


. . .

<br>

A snapshot is a two-step process:

- **Stage files**: select which files to add to the version
- **Commit changes**: save the version and add metadata (`commit message`)


## Basic workflow

{{< fa hand-point-right >}} &nbsp;Initialize `git` in a (empty) folder (`repository`)

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-0.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git init
```
<br>

The **three areas** of a `git` `repository`:

- **`working copy`**: current state of the directory (what you actually see)
- **`staging area`**: selected files that will be added to the next version
- **`repository`**: area w/ all the versions<br/>(the `.git/` subdirectory)
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;Add new files in the `repository`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-1.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git status

# On branch main
# 
# No commits yet
# 
# Untracked files:
# 	README.md
# 	analyses.R
# 	data.csv
# 
# Nothing added to commit but untracked files present
# Use "git add <file>..." to track
```
:::
::::




## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) one file

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-2.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git add data.csv
```

<br>

```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   data.csv
# 
# Untracked files:
#   (use "git add <file>..." to track)
# 	README.md
# 	analyses.R
```
:::
::::





## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) several files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-3.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git add data.csv analyses.R
```

<br>

```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   analyses.R
# 	new file:   data.csv
# 
# Untracked files:
#   (use "git add <file>..." to track)
# 	README.md
```
:::
::::



## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Stage` (select) all files

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-4.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git add .
```

<br>

```bash
git status

# On branch main
# 
# No commits yet
# 
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
# 	new file:   analyses.R
# 	new file:   data.csv
# 	new file:   README.md
```
:::
::::


## Basic workflow

{{< fa hand-point-right >}} &nbsp;`Commit` changes to create a new version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-5.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git commit -m "a good commit message"
```
:::
::::




## Basic workflow

{{< fa hand-point-right >}} &nbsp;Now we are `up-to-date`

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-6.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git status

# On branch main
# nothing to commit, working tree clean
```
:::
::::



## Commits

::::{.columns}
:::{.column width=50%}
When committing a new version (w/ `git commit`), the following information must be added:

- **`WHO`** - the person who has made the changes
<br>(automatically added by `git`)
- **`WHEN`** - the date of the commit
<br>(automatically added by `git`)
- **`WHAT`** - the files that have been modified
<br>(selected by the user w/ `git add`)
- **`WHY`** - the reason of the commit, i.e. what has been done compared to the previous version
<br>(added by the user w/ `git commit`)

:::

:::{.column width=50% .fragment}
A commit message has a title line, and an optional body

```bash
# Commit message w/ title
git commit -m "title"
```


<br>

**What is a good commit message?**

A good commit title:

- should be **short** (less than 50 characters)
- should be **informative** and **unambiguous**
- should use **active voice** and **present tense**
:::
::::

. . .

::::{.columns}
:::{.column width=50%}
:::
:::{.column width=50%}
```bash
# Print git history
git log --oneline

# f960dd3 (HEAD -> main) add data cleaning script
# dd4472c update data.csv
# 2bb9bb4 add README.md
# 2d79e7e first commit
```
:::
::::


## When should you commit?

::::{.columns}
:::{.column width=50%}
![](img/in-case-of-fire.png){width=90%}
:::
:::{.column width=50% .fragment}
<br>

- Commit a new version when you reach a **milestone**
- Create **small** and atomic commits
- Commit a state that is actually **working**
:::
::::



## Undoing things

{{< fa hand-point-right >}} &nbsp;
**1. Undo recent, uncommitted and unstaged changes**

You have modified a file but have not staged changes and you want to restore the previous version

. . .

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-7.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git status

# On branch main
# Changes not staged for commit:
#   (use "git add <file>..." to stage changes)
#   (use "git restore <file>..." to discard changes)
# 	modified:   data.csv
#
# No changes added to commit
```
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**1. Undo recent, uncommitted and unstaged changes**

You have modified a file but have not staged changes and you want to restore the previous version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-8.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
# Restore one file (discard unstaged changes)
git restore data.csv
```
<br>

```bash
git status

# On branch main
# Nothing to commit, working tree clean
```
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**1. Undo recent, uncommitted and unstaged changes**

You have modified a file but have not staged changes and you want to restore the previous version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-8.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
# Restore one file (discard unstaged changes)
git restore data.csv
```
<br>

```bash
git status

# On branch main
# Nothing to commit, working tree clean
```
<br>

{{< fa lightbulb >}} &nbsp;To discard all changes:
```bash
# Cancel all non-staged changes
git restore .
```
:::
::::



## Undoing things

{{< fa hand-point-right >}} &nbsp;
**2. Unstaged uncommitted files**

You have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version

. . .


::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-9.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
git status

# On branch main
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
# 	modified:   data.csv
```
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**2. Unstaged uncommitted files**

You have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-10.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
# Unstage one file
git restore --staged data.csv
```
<br>

```bash
git status

# On branch main
# Changes not staged for commit:
#   (use "git add <file>..." to stage changes)
#   (use "git restore <file>..." to discard changes)
# 	modified:   data.csv
#
# No changes added to commit
```
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**2. Unstaged uncommitted files**

You have modified and staged file(s) but have not committed changes yet and you want to unstage file(s) and restore the previous version

::::{ .columns }
:::{ .column width="60%"}
![](img/git-workflow-8.png){width=100%}
:::
:::{ .column width="40%"}
<br>

```bash
# Unstage one file
git restore --staged data.csv
```
<br>

```bash
git status

# On branch main
# Changes not staged for commit:
#   (use "git add <file>..." to stage changes)
#   (use "git restore <file>..." to discard changes)
# 	modified:   data.csv
#
# No changes added to commit
```
<br>

You can now restore the previous version w/:
```bash
# Discard changes (restore previous version)
git restore data.csv
```
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**3. Revert one commit**

You want to reverse the effects of a commit: use `git revert`

. . .

::::{ .columns }
:::{ .column width="50%"}
<br>

```bash
# Print git history
git log --oneline

# f960dd3 (HEAD -> main) commit 4
# dd4472c commit 3
# 2bb9bb4 commit 2
# 2d79e7e commit 1
```
:::
:::{ .column width="50%"}
:::
::::


## Undoing things

{{< fa hand-point-right >}} &nbsp;
**3. Revert one commit**

You want to reverse the effects of a commit: use `git revert`

::::{ .columns }
:::{ .column width="50%"}
<br>

```bash
# Print git history
git log --oneline

# f960dd3 (HEAD -> main) commit 4
# dd4472c commit 3
# 2bb9bb4 commit 2
# 2d79e7e commit 1
```

<br>

```bash
# Revert commit dd4472c
git revert dd4472c
```
:::
:::{ .column width="50%"}
:::
::::



## Undoing things

{{< fa hand-point-right >}} &nbsp;
**3. Revert one commit**

You want to reverse the effects of a commit: use `git revert`

::::{ .columns }
:::{ .column width="50%"}
<br>

```bash
# Print git history
git log --oneline

# f960dd3 (HEAD -> main) commit 4
# dd4472c commit 3
# 2bb9bb4 commit 2
# 2d79e7e commit 1
```

<br>

```bash
# Revert commit dd4472c
git revert dd4472c
```

<br>

```bash
# Print git history
git log --oneline

# d62ad3e (HEAD -> main) Revert "commit 3"
# f960dd3 commit 4
# dd4472c commit 3
# 2bb9bb4 commit 2
# 2d79e7e commit 1
```
:::
:::{ .column width="50%"}
:::
::::

`git revert` does not alter the history and creates a new commit



## Undoing things

{{< fa hand-point-right >}} &nbsp;
**4. Deleting commits**

You want to delete one or more commits: use `git reset --hard`


::::{ .columns }
:::{ .column width="50%" .fragment}
<br>

```bash
# Print git history
git log --oneline

# f960dd3 (HEAD -> main) commit 4
# dd4472c commit 3
# 2bb9bb4 commit 2
# 2d79e7e commit 1
```

<br>

```bash
# Delete the two more recent commits
git reset --hard 2bb9bb4
```

:::
:::{ .column width="50%"}
:::
::::

::::{ .columns }
:::{ .column width="50%" .fragment}
<br>

```bash
# Print git history
git log --oneline

# 2bb9bb4 (HEAD -> main) commit 2
# 2d79e7e commit 1
```

:::
:::{ .column width="50%"}
:::
::::


. . . 

`git reset --hard` alters the history. **Be careful** with this command

