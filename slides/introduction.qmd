# Introduction

## What is reproducibility?

. . .

<br>

![Source: [https://eliocamp.github.io](https://eliocamp.github.io/reproducibility-with-r/materials/day1/01-introduction/)](img/reproducible-matrix.jpg){fig-align="center" width="50%"}


**Reproducibility** is about results that can be obtained by someone else (or you in the future) given the **same data** and the **same code**. This is a technical problem.

<br/>

{{< fa hand-point-right >}} &nbsp;We talk about **Computational reproducibility**


## Reproducibility spectrum

<br>

![Source: Peng (2011)[^peng]](img/peng-science.jpg){fig-align="center" width="75%"}

. . .

<br/>

Each degree of reproducibility requires additional skills and time. While some of those skills (e.g. literal programming, version control, setting up environments) pay off in the long run, they can require a high up-front investment.

## Concepts

According to Wilson _et al._ (2017)[^wilson], good practices for a better reproducibility can be organized into the following six topics:

<br/>
<br/>
<br/>

:::: { .columns }
::: { .column .center width="33%"}
{{< fa database >}} &nbsp;Data management
:::
::: { .column .center width="33%"}
{{< fa folder >}} &nbsp;Project organization
:::
::: { .column .center width="33%"}
{{< fa code-branch >}} &nbsp;Tracking changes
:::
::::

<br/>

:::: { .columns }
::: { .column .center width="33%"}
{{< fa brands github >}} &nbsp;Collaboration
:::
::: { .column .center width="33%"}
{{< fa brands markdown >}} &nbsp;Manuscript
:::
::: { .column .center width="33%"}
{{< fa brands r-project >}} &nbsp;Code & Software
:::
::::


[^wilson]: <https://doi.org/10.1371/journal.pcbi.1005510>


# Version control

## Motivations

::::{ .columns }
:::{ .column width="50%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="50%" .fragment}
**Questions**

- Which version of `analyses.R` is the final one?
- What about `data.csv`?
- What are the differences between versions?
- Who have contributed to these versions? When?
:::
::::


. . .

{{< fa hand-point-right >}} &nbsp;We need a tool that deals with versions for us


## Motivations

![](img/git-logo-long.png){width=15% fig-align="center"}

::::{ .columns }
:::{ .column width="50%" align="left"}
![Project content (without `git`)](img/folder_without_git.png)
:::
:::{ .column width="50%" align="left"}
![Project content (with `git`)](img/folder_with_git.png)
:::
::::


## Presentation of `git`

`git` is a **Version Control System** (VCS).


## Presentation of `git`

`git` is a **Version Control System** (VCS). With `git` you can:

::::{ .columns }
:::{ .column width="60%" align="left"}
- keep your working copy clean
- make contributions transparent
<br/>(what | who | when | why)
- keep the entire history of a file (and project)
- inspect a file throughout its life time
- revert back to a previous version
- handle multiple versions (branches)
- facilitate collaborations w/ code hosting platforms
<br>(GitHub, GitLab, Bitbucket, etc.)
- backup your project
:::
:::{ .column width="40%"}
<br/>
<br/>
![](img/git-logo-long.png)
:::
::::


## A word of warning


**`git`** and **`GitHub`** are **not the same thing**

- `git` is a free and open-source **software**
- `GitHub` (and co) is a **web platform** to host and share projects tracked by `git`


. . . 

<br>

In other words:

> You do not need `GitHub` to use `git` but you cannot use `GitHub` without using `git`


## git as a CLI

::::{ .columns }
:::{ .column width="50%"}
![](img/git-cli.png){width=100%}
:::
:::{ .column width="50%" align="left"}
<br>

- `Git` is a command-line interface (CLI)
- You interact with `git` using a terminal
- All commands start w/ the keyword `git`
<br>(`git status / log / add / commit`)
:::
::::


. . .

{{< fa lightbulb >}} &nbsp;But a lot of [third-party tools](https://git-scm.com/downloads/guis) provides a graphical interface to `git`
<br>(e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [GitKraken](https://www.gitkraken.com/), [GitHub Desktop](https://desktop.github.com/), extensions for [VSCode](https://code.visualstudio.com/), [VSCodium](https://vscodium.com/), [neovim](https://neovim.io/), etc.)


<br>

> Just keep in mind that for some operations you will need to use the terminal


## RStudio and git

::::{ .columns }
:::{ .column width="100%"}
**Git main panel**

![](img/git-rstudio.png){width=80%}
:::
:::{ .column width="0%"}
:::
::::


## RStudio and git


::::{ .columns }
:::{ .column width="50%"}
**Stage files, view differences and commit changes**

![](img/rstudio-change.png){width=100%}
:::
:::{ .column width="50%"}
**View history and versions**

![](img/rstudio-history.png){width=100%}
:::
::::

## Installation and configuration


Check out and follow the tutorial from N. Casajus, 2024, Setting up R: [https://frbcesab.github.io/rsetup/](https://frbcesab.github.io/rsetup/).  


![](img/rsetup.png){fig-align="center" width=50%}





